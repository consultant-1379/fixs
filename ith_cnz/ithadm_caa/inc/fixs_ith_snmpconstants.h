/*
 * fixs_ith_snmpconstants.h
 *
 *  Created on: Jan 28, 2016
 *      Author: xassore
 */

#ifndef ITHADM_CAA_INC_FIXS_ITH_SNMPCONSTANTS_H_
#define ITHADM_CAA_INC_FIXS_ITH_SNMPCONSTANTS_H_

#include "fixs_ith_snmpmibdefinitions.h"

namespace fixs_ith_snmp {
	/** @brief FIXS Server error constants.
	 *
	 *	ErrorConstants enumeration detailed description
	 */
#define ITH_SNMP_COMMUNITY_RONLY_STRING  "PUBLIC"
#define ITH_SNMP_COMMUNITY_RW_STRING     "NETMAN"
#define ITH_SNMP_COMMUNITY_PIM_PORT_START 122
#define ITH_SNMP_COMMUNITY_PIM_PORT_END 130
#define ITH_SNMP_COMMUNITY_PIM_PORT_NOT_EXIST 126

//#define FIXS_ITH_SNMP_ERROR_CONSTANTS_COUNT 22
	enum ErrorConstants {
//		ERR_SNMP_DEFINITION_START = -FIXS_ITH_SNMP_ERROR_CONSTANTS_COUNT - 1,

		// Start SNMP error value definitions
		ERR_SNMP_ERROR_VALUES_START = -2000,

		// Add here new error codes and adjust the above FIXS_ITH_ERROR_CONSTANTS_COUNT macro constant

		ERR_SNMP_NO_OPERATIONAL_SWITCH_BOARD,
		ERR_SNMP_NO_ACTIVE_SWITCH_BOARD,
		ERR_SNMP_IPMI_ACTIVE_NOTWORKING,
		ERR_SNMP_INVALID_SWITCH_BOARD_SLOT_POSITION,
		ERR_SNMP_INVALID_SWITCH_BOARD_IP,
		ERR_SNMP_CALLBACK_ERRORSTAT_INDICATION,
		ERR_SNMP_CALLBACK_NO_MESSAGE_RECEIVED,
		ERR_SNMP_NOT_AXE_TRAP,
		ERR_SNMP_NOT_PDU_TRAP,
		ERR_SNMP_UNKNOWN_TRAP,
		ERR_SNMP_BAD_ASN_TYPE,
		ERR_SNMP_TIMEOUT,
		ERR_SNMP_NOT_ENOUGH_SPACE,
		ERR_SNMP_NULL_PARAMETER,
		ERR_SNMP_SELECT,
		ERR_SNMP_PDU_TOO_MANY_VARIABLES,
		ERR_SNMP_PDU_UNEXPECTED_VARIABLE,
		ERR_SNMP_PDU_VARIABLE_BAD_SIZE,
		ERR_SNMP_PDU_VARIABLE_NULL_SIZE,
		ERR_SNMP_PDU_VARIABLE_NO_SUCH_INSTANCE,
		ERR_SNMP_PDU_VARIABLE_NO_SUCH_OBJECT,
		ERR_SNMP_PDU_VARIABLE_BAD_TYPE,
		ERR_SNMP_PDU_NO_VARIABLE_BOUND,
		ERR_SNMP_PDU_ADD_NULL_VARIABLE,
		ERR_SNMP_PDU_ADD_VARIABLE_VALUE,
		ERR_SNMP_PDU_CREATE,
		ERR_SNMP_SESSION_READ,
		ERR_SNMP_SESSION_NOT_VALID,
		ERR_SNMP_SESSION_SEND,
		ERR_SNMP_SESSION_CLOSE,
		ERR_SNMP_SESSION_NOT_OPEN,
		ERR_SNMP_SESSION_OPEN,
		ERR_SNMP_SESSION_NOT_CLOSED,
		ERR_SNMP_REQUEST_NOT_SENT,
		ERR_SNMP_TRAP_SUBSCRIPTION,
		ERR_SNMP_UNSUBSCRIBE_LEFT_SB,
		ERR_SNMP_UNSUBSCRIBE_RIGHT_SB,
		ERR_SNMP_UNSUBSCRIBE_BOTH_SB,
		ERR_SNMP_VLAN_CREATE_CONTROL_PLANE,
		ERR_SNMP_VLAN_CREATE_TRANSPORT_PLANE,
		ERR_SNMP_VLAN_CREATE_BOTH_PLANES,
		ERR_SNMP_NO_SWITCH_BOARD_FOUND,
		ERR_SNMP_L2_INTERFACE_NOT_FOUND,
		ERR_SNMP_L2_INTERFACE_TO_BITMAP,
		ERR_SNMP_WRONG_SWITCH_BOARD_PLANE,
		ERR_SNMP_UNKNOWN_VLAN_PORT_TYPE,
		ERR_SNMP_SUBNET_CREATE,
		ERR_SNMP_INVALID_SUBNET,

		// ERRORS BY NET-SNMP FOR GET/SET RESPONSE PDU

    /*
     * in SNMPv1, SNMPsec, SNMPv2p, SNMPv2c, SNMPv2u, SNMPv2*, and SNMPv3 PDUs
     */
		ERR_SNMP_NETSNMP_ERR_TOOBIG,
		ERR_SNMP_NETSNMP_ERR_NOSUCHNAME,
		ERR_SNMP_NETSNMP_ERR_BADVALUE,
		ERR_SNMP_NETSNMP_ERR_READONLY,
		ERR_SNMP_NETSNMP_ERR_GENERR,
    /*
     * in SNMPv2p, SNMPv2c, SNMPv2u, SNMPv2*, and SNMPv3 PDUs
     */
		ERR_SNMP_NETSNMP_ERR_NOACCESS,
		ERR_SNMP_NETSNMP_ERR_WRONGTYPE,
		ERR_SNMP_NETSNMP_ERR_WRONGLENGTH,
		ERR_SNMP_NETSNMP_ERR_WRONGENCODING,
		ERR_SNMP_NETSNMP_ERR_WRONGVALUE,
		ERR_SNMP_NETSNMP_ERR_NOCREATION,
		ERR_SNMP_NETSNMP_ERR_INCONSISTENTVALUE,
		ERR_SNMP_NETSNMP_ERR_RESOURCEUNAVAILABLE,
		ERR_SNMP_NETSNMP_ERR_COMMITFAILED,
		ERR_SNMP_NETSNMP_ERR_UNDOFAILED,
		ERR_SNMP_NETSNMP_ERR_AUTHORIZATIONERROR,
		ERR_SNMP_NETSNMP_ERR_NOTWRITABLE,

    /*
     * in SNMPv2c, SNMPv2u, SNMPv2*, and SNMPv3 PDUs
     */
		ERR_SNMP_NETSNMP_ERR_INCONSISTENTNAME,

    /*
     * in case the NET-SNMP error is not defined
     */
		ERR_SNMP_NETSNMP_ERROR_UNDEFINED,

		ERR_SNMP_INTERNAL_ERROR,

		// End SNMP error value definitions

		ERR_SNMP_NO_ERRORS = 0
	};

	/** @brief SNMP session state constants.
	 *
	 *	SnmpSessionStateConstants enumeration detailed description
	 */
	enum SnmpSessionStateConstants {
		SNMP_SESSION_STATE_CLOSED	= 0,
		SNMP_SESSION_STATE_OPEN		= 1
	};

	/** @brief SNMP generic constants.
	 *
	 *	SnmpGenericConstants enumeration detailed description
	 */
	enum SnmpGenericConstants {
		TRAP_MESSAGE_LEN	= 15,
		IF_NAME_MAX_LEN = 20,
		VLAN_NAME_MAX_LEN = 32,
		IF_ALIAS_NAME_MAX_LEN = 64,
		CONTROL_INTERFACE_INDEX_MAX_VALUE = 36,
		TRANSPORT_INTERFACE_INDEX_MAX_VALUE = 194,
		CONTAINER_FILE_NAME_MAX_VALUE = 100
	};


	/** @brief Shelf Manager Controller generic constants.
	 *
	 *	SmcGenericConstants enumeration detailed description
	 */
	enum SwitchBoardGenericConstants {
		SWITCH_BOARD_COUNT_PER_MAGAZINE = 2
	};

	enum IfMauTypeListBitsConstants {
		IF_MAU_TYPE_OTHER							= 0,  // other or unknown
		IF_MAU_TYPE_AUI								= 1,  // AUI
		IF_MAU_TYPE_10_BASE_5					= 2,  // 10BASE-5
		IF_MAU_TYPE_FOIRL							= 3,  // FOIRL

		IF_MAU_TYPE_10_BASE_2					= 4,  // 10BASE-2
		IF_MAU_TYPE_10_BASE_T					= 5,  // 10BASE-T duplex mode unknown
		IF_MAU_TYPE_10_BASE_FP				= 6,  // 10BASE-FP
		IF_MAU_TYPE_10_BASE_FB				= 7,  // 10BASE-FB
		IF_MAU_TYPE_10_BASE_FL				= 8,  // 10BASE-FL duplex mode unknown
		IF_MAU_TYPE_10_BROAD_36				= 9,  // 10BROAD36
		IF_MAU_TYPE_10_BASE_THD				= 10, // 10BASE-T  half duplex mode
		IF_MAU_TYPE_10_BASE_TFD				= 11, // 10BASE-T  full duplex mode
		IF_MAU_TYPE_10_BASE_FLHD			= 12, // 10BASE-FL half duplex mode
		IF_MAU_TYPE_10_BASE_FLFD			= 13, // 10BASE-FL full duplex mode

		IF_MAU_TYPE_100_BASE_T4				= 14, // 100BASE-T4
		IF_MAU_TYPE_100_BASE_TXHD			= 15, // 100BASE-TX half duplex mode
		IF_MAU_TYPE_100_BASE_TXFD			= 16, // 100BASE-TX full duplex mode
		IF_MAU_TYPE_100_BASE_FXHD			= 17, // 100BASE-FX half duplex mode
		IF_MAU_TYPE_100_BASE_FXFD			= 18, // 100BASE-FX full duplex mode
		IF_MAU_TYPE_100_BASE_T2HD			= 19, // 100BASE-T2 half duplex mode
		IF_MAU_TYPE_100_BASE_T2FD			= 20, // 100BASE-T2 full duplex mode

		IF_MAU_TYPE_1000_BASE_XHD			= 21, // 1000BASE-X half duplex mode
		IF_MAU_TYPE_1000_BASE_XFD			= 22, // 1000BASE-X full duplex mode
		IF_MAU_TYPE_1000_BASE_LXHD		= 23, // 1000BASE-LX half duplex mode
		IF_MAU_TYPE_1000_BASE_LXFD		= 24, // 1000BASE-LX full duplex mode
		IF_MAU_TYPE_1000_BASE_SXHD		= 25, // 1000BASE-SX half duplex mode
		IF_MAU_TYPE_1000_BASE_SXFD		= 26, // 1000BASE-SX full duplex mode
		IF_MAU_TYPE_1000_BASE_CXHD		= 27, // 1000BASE-CX half duplex mode
		IF_MAU_TYPE_1000_BASE_CXFD		= 28, // 1000BASE-CX full duplex mode
		IF_MAU_TYPE_1000_BASE_THD			= 29, // 1000BASE-T half duplex mode
		IF_MAU_TYPE_1000_BASE_TFD			= 30, // 1000BASE-T full duplex mode

		IF_MAU_TYPE_10G_BASE_X				= 31, // 10GBASE-X
		IF_MAU_TYPE_10G_BASE_LX4			= 32, // 10GBASE-LX4

		IF_MAU_TYPE_10G_BASE_R				= 33, // 10GBASE-R
		IF_MAU_TYPE_10G_BASE_ER				= 34, // 10GBASE-ER
		IF_MAU_TYPE_10G_BASE_LR				= 35, // 10GBASE-LR
		IF_MAU_TYPE_10G_BASE_SR				= 36, // 10GBASE-SR
		IF_MAU_TYPE_10G_BASE_W				= 37, // 10GBASE-W
		IF_MAU_TYPE_10G_BASE_EW				= 38, // 10GBASE-EW
		IF_MAU_TYPE_10G_BASE_LW				= 39, // 10GBASE-LW
		IF_MAU_TYPE_10G_BASE_SW				= 40, // 10GBASE-SW
		IF_MAU_TYPE_10G_BASE_CX4			= 41, // 10GBASE-CX4

		IF_MAU_TYPE_2_BASE_TL					= 42, // 2BASE-TL

		IF_MAU_TYPE_10_PASS_TS				= 43, // 10PASS-TS

		IF_MAU_TYPE_100_BASE_BX10D		= 44, // 100BASE-BX10D
		IF_MAU_TYPE_100_BASE_BX10U		= 45, // 100BASE-BX10U
		IF_MAU_TYPE_100_BASE_LX10			= 46, // 100BASE-LX10

		IF_MAU_TYPE_1000_BASE_BX10D		= 47, // 1000BASE-BX10D
		IF_MAU_TYPE_1000_BASE_BX10U		= 48, // 1000BASE-BX10U
		IF_MAU_TYPE_1000_BASE_LX10		= 49, // 1000BASE-LX10
		IF_MAU_TYPE_1000_BASE_PX10D		= 50, // 1000BASE-PX10D
		IF_MAU_TYPE_1000_BASE_PX10U		= 51, // 1000BASE-PX10U
		IF_MAU_TYPE_1000_BASE_PX20D		= 52, // 1000BASE-PX20D
		IF_MAU_TYPE_1000_BASE_PX20U		= 53, // 1000BASE-PX20U

		IF_MAU_TYPE_10G_BASE_T				= 54, // 10GBASE-T
		IF_MAU_TYPE_10G_BASE_LRM			= 55, // 10GBASE-LRM

		IF_MAU_TYPE_1000_BASE_KX			= 56, // 1000BASE-KX

		IF_MAU_TYPE_10G_BASE_KX4			= 57, // 10GBASE-KX4
		IF_MAU_TYPE_10G_BASE_KR				= 58, // 10GBASE-KR

		IF_MAU_TYPE_10G1G_BASE_PRXD1	= 59, // 10/1GBASE-PRX-D1
		IF_MAU_TYPE_10G1G_BASE_PRXD2	= 60, // 10/1GBASE-PRX-D2
		IF_MAU_TYPE_10G1G_BASE_PRXD3	= 61, // 10/1GBASE-PRX-D3
		IF_MAU_TYPE_10G1G_BASE_PRXU1	= 62, // 10/1GBASE-PRX-U1
		IF_MAU_TYPE_10G1G_BASE_PRXU2	= 63, // 10/1GBASE-PRX-U2
		IF_MAU_TYPE_10G1G_BASE_PRXU3	= 64, // 10/1GBASE-PRX-U3

		IF_MAU_TYPE_10G_BASE_PRD1			= 65, // 10GBASE-PR-D1
		IF_MAU_TYPE_10G_BASE_PRD2			= 66, // 10GBASE-PR-D2
		IF_MAU_TYPE_10G_BASE_PRD3			= 67, // 10GBASE-PR-D3
		IF_MAU_TYPE_10G_BASE_PRU1			= 68, // 10GBASE-PR-U1
		IF_MAU_TYPE_10G_BASE_PRU3			= 69, // 10GBASE-PR-U3

		IF_MAU_TYPE_40G_BASE_KR4			= 70, // 40GBASE-KR4
		IF_MAU_TYPE_40G_BASE_CR4			= 71, // 40GBASE-CR4
		IF_MAU_TYPE_40G_BASE_SR4			= 72, // 40GBASE-SR4
		IF_MAU_TYPE_40G_BASE_FR				= 73, // 40GBASE-FR
		IF_MAU_TYPE_40G_BASE_LR4			= 74, // 40GBASE-LR4

		IF_MAU_TYPE_100G_BASE_CR10		= 75, // 100GBASE-CR10
		IF_MAU_TYPE_100G_BASE_SR10		= 76, // 100GBASE-SR10
		IF_MAU_TYPE_100G_BASE_LR4			= 77, // 100GBASE-LR4
		IF_MAU_TYPE_100G_BASE_ER4			= 78  // 100GBASE-ER4
	};
}

#endif /* ITHADM_CAA_INC_FIXS_ITH_SNMPCONSTANTS_H_ */
